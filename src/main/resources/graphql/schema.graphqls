type Query {
    vehicleById(id: ID): Vehicle
    vehicles(pageNumber: Int, pageSize: Int): Page
    vehiclesByOwnerId(ownerId: String, pageNumber: Int, pageSize: Int): Page
}

type Mutation {
    addVehicle(vehicle: AddVehicleInput): Vehicle
    updateVehicle(id: ID, vehicle: UpdateVehicleInput): Vehicle
    removeVehicle(id: ID): ID
}

type Pageable {
    pageNumber: Int
    pageSize: Int
    totalElements: Int
    numberOfElements: Int
    totalPages: Int
}

type Page {
    content: [Vehicle]
    pageInfo: Pageable
}

type Vehicle {
    id: ID
    alias: String
    region: String
    make: String
    model: String
    version: String
    countryCode: String
    licensePlate: String
    licensePlateDate: String
    weight: Int
    mileage: Int
    ownerId: String
}

input AddVehicleInput {
    alias: String
    region: String
    make: String
    model: String
    version: String
    countryCode: String
    licensePlate: String
    licensePlateDate: String
    weight: Int
    mileage: Int
    ownerId: String
}

input UpdateVehicleInput {
    alias: String
    make: String
    model: String
    version: String
    licensePlateDate: String
    weight: Int
    mileage: Int
    ownerId: String
}